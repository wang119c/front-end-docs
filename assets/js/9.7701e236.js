(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{423:function(s,a,n){"use strict";n.r(a);var t=n(62),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"安装相关依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装相关依赖"}},[s._v("#")]),s._v(" 安装相关依赖")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("cnpm install husky lint-staged -D\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"要在安装后自动启用-git-挂钩-请编辑-package-json"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#要在安装后自动启用-git-挂钩-请编辑-package-json"}},[s._v("#")]),s._v(" 要在安装后自动启用 Git 挂钩，请编辑 package.json")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('npm set-script prepare "husky install"\n此时应该有：\n// package.json\n{\n  "scripts": {\n    "prepare": "husky install"\n  }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"在-package-json-中配置lint-staged"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在-package-json-中配置lint-staged"}},[s._v("#")]),s._v(" 在 package.json 中配置lint-staged")]),s._v(" "),n("p",[s._v("注：这里 lint-staged 的配置是：在 git 的待提交的文件中，在 src 目录下的所有指定文件都要执行已配置的命令。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// package.json\n{\n   "lint-staged": {\n    "src/**/*.{css，scss,less}": [\n      "git add" //继续git流程\n    ],\n    "src/**/*.{js,vue,jsx}": [\n       "eslint --fix", // eslint检测修复\n       "git add" //继续git流程\n    ]\n  }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h3",{attrs:{id:"执行命令创建-pre-commit-钩子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行命令创建-pre-commit-钩子"}},[s._v("#")]),s._v(" 执行命令创建 pre-commit 钩子")]),s._v(" "),n("p",[s._v("注：npx是npm5.2之后发布的一个命令。官网说它是“execute npm package binaries”，就是执行npm依赖包的二进制文件，npx 主要用于命令行的寻址等辅助功能上，而 npm 是管理依赖的。简而言之，就是我们可以使用npx来执行各种命令。npx官网")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//使用执行 lint-statged 使用本地资源 不下载\nnpx husky add .husky/pre-commit "npx --no-install lint-staged" \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("执行命令完成后.husky文件夹中会有一个 pre-commit (修改其中的代码,就是提交代码前需要执行的检查代码的命令)。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('#!/bin/sh\n. "$(dirname "$0")/_/husky.sh"\n\n//使用执行 lint-statged 使用本地资源 不下载\nnpx --no-install lint-staged\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("以上，针对husky自定义目录钩子的调整就结束了，当前子目录下的所有husky指令会通过.husky目录去执行。")]),s._v(" "),n("h3",{attrs:{id:"安装配置安装-eslint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装配置安装-eslint"}},[s._v("#")]),s._v(" 安装配置安装 eslint")]),s._v(" "),n("p",[s._v("需要安装eslint\n完成之后，在每次提交代码之前，pre-commit都会拦截 Git 的 commit 操作，然后运行lint-staged命令进行代码检测，若检测到有违反校验规则的情况，则会返回错误，从而导致git commit失败。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('验证\ngit add .\ngit commit -m "test"\n绕过\ngit commit -m "test" --no-verify\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("如果出现未验证的情况")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('在package.json添加并执行\n"scripts": { "prepare": "husky install" }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);